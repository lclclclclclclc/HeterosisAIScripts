initialize() {
	defineConstant("dominance", 0 ); // unused in neutral model; recessive = 0; additive = 0.5;
	defineConstant("n", 10 ); // scaling factor
	defineConstant("m4s", 0.01 *n); // if m4s>0, adaptive introgression; else, deleterious null

	defineConstant("total_mu", 0);
	initializeMutationRate(total_mu * n);
	initializeMutationType("m1", 0.5, "f", 0); // placeholder type.  No mutations will be placed by SLiM
	initializeMutationType("m4", 0.5, "f", 0.01*n); // adaptive

	initializeGenomicElementType("g1", m1, 1); // placeholder type.  No mutations will be placed by SLiM
	initializeGenomicElement(g1, 0, 4999999);

	// recombination
	// read in recomb info.  Only relevant around AI locus, but think I have to initialize for whole sim.
	info_lines = readFile("/Users/egibson/Documents/science/Grad/demog20/proj/HeterosisAIScripts/regions/sim_seq_info_sgcb.txt");
	rec_ends = NULL;
	rec_rates = NULL;
	for (line in info_lines[substr(info_lines, 0, 2) == "rec"])
	{
		components = strsplit(line, " ");
		rec_ends = c(rec_ends, asInteger(components[1]));
		rec_rates = c(rec_rates, asFloat(components[2]));
	}
	//multiply rec rates by scaling factor
	initializeRecombinationRate(0.5*(1-(1-2*rec_rates)^n), rec_ends);

	initializeTreeSeq();
	initializeSex( "A" ); // etc: spaces for ease of editing with line.split
}


// No burn in for neutral model.  Recapitation (with recombination map) will suffice.
1 early() {
	defineConstant("simnum", getSeed());
	setSeed(getSeed() + 27126);
	sim.addSubpop("p1", asInteger(10000/n));
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

2 { // after initial generation from which we will recapitate, split populations into two: p1 and p2
	sim.addSubpopSplit("p2", asInteger(10000/n), p1);
}
2 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

12 late() {  // Keeping with original, AI emerges 100/n_scale generations after p1/p2 split.
	if(m4s != 0.0){  // We introduce an adaptive variant.
		target = sample(p1.genomes, 1);
		target.addNewDrawnMutation(m4, 2500000 ); // TODO: change to insert_ai
		// etc: critical change here from .outputFull to .treeSeqOutput
		sim.treeSeqOutput("/Users/egibson/Documents/science/Grad/demog20/proj/HeterosisAIScripts/output/tmp/" + simnum + ".txt");
	}
}
12: late() {
	if(m4s != 0.0){  // We check in on our adaptive variant.
		mut = sim.mutationsOfType(m4);
		if (size(mut) == 1) {
			if (sim.mutationFrequencies(NULL, mut) > 0.1) {
				// stop checking in on existence of AI variant if it's at >10% frequency
				sim.deregisterScriptBlock(self);
			}
		}
		else {
			sim.readFromPopulationFile("/Users/egibson/Documents/science/Grad/demog20/proj/HeterosisAIScripts/output/tmp/" + simnum + ".txt");
			setSeed(getSeed() + 1);
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m4, 2500000 );  // TODO: change to insert_ai
		}
	}
}

1000 {
	sim.addSubpopSplit("p3", asInteger(1000/n), p2);
}
1000 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

2000 early(){
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	p1.setMigrationRates(p3, 0.00); //migration rate INTO p1
	p3.setMigrationRates(p1, 0.1); //migration rate INTO p3
}
2000 late(){
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	p3.setMigrationRates(p1, 0.00);
	p1.setMigrationRates(p3, 0.00);
}

3000 late(){
	sim.treeSeqOutput("/Users/egibson/Documents/science/Grad/demog20/proj/HeterosisAIScripts/output/trees/sgcb_m0_sexA.trees");
}
