// Keywords: sexual, sex ratio

initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	//initializeSex("A");
	
	// fraction of introgressors to be female.
	//		(no sex-bias is 0.5)
	defineConstant("female_frac", 0 );
}
1 { sim.addSubpop("p1", 500); }

200 { sim.addSubpopSplit("p3", 1000, p1); }

300 modifyChild(p1) {
	if ((sourceSubpop == p1) & (subpop == p3)) {
		if (parent1.sex == "H") {
			print("Not a sexual model.");
			return T;
		}
		male_frac = 1 - female_frac;
		
		if (childIsFemale) {  // This is a daughter of migrants.
			roll = sample( c(T, F), size=1, weights=c(female_frac, male_frac) );
			return roll;
		}
		else {  // This is a son of migrants.
			roll = sample( c(T, F), size=1, weights=c(male_frac, female_frac) );
			return roll;
		}
	}
	else {  // This child has local parents.
		return T;
	}

}

300 early() {
	p3.setMigrationRates(p1, 0.1 * 2);
}

300 {


}

300 late() {

	
}

300 {sim.simulationFinished();}

301 {
	num_female_introgs = size( p3.subsetIndividuals(sex = "F", migrant = T) );
	num_male_introgs = size( p3.subsetIndividuals(sex = "M", migrant = T) );
	fm_ratio = c(num_female_introgs, num_male_introgs);
	
	cat( "Within an introgressor population of " );
	print( num_female_introgs + num_male_introgs );
	cat( "we achieved an introgressor F:M sex ratio of " );
	print( fm_ratio );
}

301 late() {
	num_female_introgs = size( p3.subsetIndividuals(sex = "F", migrant = T) );
	num_male_introgs = size( p3.subsetIndividuals(sex = "M", migrant = T) );
	fm_ratio = c(num_female_introgs, num_male_introgs);
	
	cat( "Within an introgressor population of " );
	print( num_female_introgs + num_male_introgs );
	cat( "we achieved an introgressor F:M sex ratio of " );
	print( fm_ratio );
}

302 { sim.simulationFinished(); }
